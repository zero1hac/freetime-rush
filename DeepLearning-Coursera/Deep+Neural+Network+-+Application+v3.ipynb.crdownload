{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Neural Network for Image Classification: Application\n",
    "\n",
    "When you finish this, you will have finished the last programming assignment of Week 4, and also the last programming assignment of this course! \n",
    "\n",
    "You will use use the functions you'd implemented in the previous assignment to build a deep network, and apply it to cat vs non-cat classification. Hopefully, you will see an improvement in accuracy relative to your previous logistic regression implementation.  \n",
    "\n",
    "**After this assignment you will be able to:**\n",
    "- Build and apply a deep neural network to supervised learning. \n",
    "\n",
    "Let's get started!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1 - Packages"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's first import all the packages that you will need during this assignment. \n",
    "- [numpy](www.numpy.org) is the fundamental package for scientific computing with Python.\n",
    "- [matplotlib](http://matplotlib.org) is a library to plot graphs in Python.\n",
    "- [h5py](http://www.h5py.org) is a common package to interact with a dataset that is stored on an H5 file.\n",
    "- [PIL](http://www.pythonware.com/products/pil/) and [scipy](https://www.scipy.org/) are used here to test your model with your own picture at the end.\n",
    "- dnn_app_utils provides the functions implemented in the \"Building your Deep Neural Network: Step by Step\" assignment to this notebook.\n",
    "- np.random.seed(1) is used to keep all the random function calls consistent. It will help us grade your work."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import time\n",
    "import numpy as np\n",
    "import h5py\n",
    "import matplotlib.pyplot as plt\n",
    "import scipy\n",
    "from PIL import Image\n",
    "from scipy import ndimage\n",
    "from dnn_app_utils_v2 import *\n",
    "\n",
    "%matplotlib inline\n",
    "plt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plots\n",
    "plt.rcParams['image.interpolation'] = 'nearest'\n",
    "plt.rcParams['image.cmap'] = 'gray'\n",
    "\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2 - Dataset\n",
    "\n",
    "You will use the same \"Cat vs non-Cat\" dataset as in \"Logistic Regression as a Neural Network\" (Assignment 2). The model you had built had 70% test accuracy on classifying cats vs non-cats images. Hopefully, your new model will perform a better!\n",
    "\n",
    "**Problem Statement**: You are given a dataset (\"data.h5\") containing:\n",
    "    - a training set of m_train images labelled as cat (1) or non-cat (0)\n",
    "    - a test set of m_test images labelled as cat and non-cat\n",
    "    - each image is of shape (num_px, num_px, 3) where 3 is for the 3 channels (RGB).\n",
    "\n",
    "Let's get more familiar with the dataset. Load the data by running the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "train_x_orig, train_y, test_x_orig, test_y, classes = load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The following code will show you an image in the dataset. Feel free to change the index and re-run the cell multiple times to see other images. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 0. It's a non-cat picture.\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n1IRFRDL6BcZD1YBtao6bAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f33c8429f28>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of a picture\n",
    "index = 10\n",
    "plt.imshow(train_x_orig[index])\n",
    "print (\"y = \" + str(train_y[0,index]) + \". It's a \" + classes[train_y[0,index]].decode(\"utf-8\") +  \" picture.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training examples: 209\n",
      "Number of testing examples: 50\n",
      "Each image is of size: (64, 64, 3)\n",
      "train_x_orig shape: (209, 64, 64, 3)\n",
      "train_y shape: (1, 209)\n",
      "test_x_orig shape: (50, 64, 64, 3)\n",
      "test_y shape: (1, 50)\n"
     ]
    }
   ],
   "source": [
    "# Explore your dataset \n",
    "m_train = train_x_orig.shape[0]\n",
    "num_px = train_x_orig.shape[1]\n",
    "m_test = test_x_orig.shape[0]\n",
    "\n",
    "print (\"Number of training examples: \" + str(m_train))\n",
    "print (\"Number of testing examples: \" + str(m_test))\n",
    "print (\"Each image is of size: (\" + str(num_px) + \", \" + str(num_px) + \", 3)\")\n",
    "print (\"train_x_orig shape: \" + str(train_x_orig.shape))\n",
    "print (\"train_y shape: \" + str(train_y.shape))\n",
    "print (\"test_x_orig shape: \" + str(test_x_orig.shape))\n",
    "print (\"test_y shape: \" + str(test_y.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual, you reshape and standardize the images before feeding them to the network. The code is given in the cell below.\n",
    "\n",
    "<img src=\"images/imvectorkiank.png\" style=\"width:450px;height:300px;\">\n",
    "\n",
    "<caption><center> <u>Figure 1</u>: Image to vector conversion. <br> </center></caption>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "train_x's shape: (12288, 209)\n",
      "test_x's shape: (12288, 50)\n"
     ]
    }
   ],
   "source": [
    "# Reshape the training and test examples \n",
    "train_x_flatten = train_x_orig.reshape(train_x_orig.shape[0], -1).T   # The \"-1\" makes reshape flatten the remaining dimensions\n",
    "test_x_flatten = test_x_orig.reshape(test_x_orig.shape[0], -1).T\n",
    "\n",
    "# Standardize data to have feature values between 0 and 1.\n",
    "train_x = train_x_flatten/255.\n",
    "test_x = test_x_flatten/255.\n",
    "\n",
    "print (\"train_x's shape: \" + str(train_x.shape))\n",
    "print (\"test_x's shape: \" + str(test_x.shape))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$12,288$ equals $64 \\times 64 \\times 3$ which is the size of one reshaped image vector."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3 - Architecture of your model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that you are familiar with the dataset, it is time to build a deep neural network to distinguish cat images from non-cat images.\n",
    "\n",
    "You will build two different models:\n",
    "- A 2-layer neural network\n",
    "- An L-layer deep neural network\n",
    "\n",
    "You will then compare the performance of these models, and also try out different values for $L$. \n",
    "\n",
    "Let's look at the two architectures.\n",
    "\n",
    "### 3.1 - 2-layer neural network\n",
    "\n",
    "<img src=\"images/2layerNN_kiank.png\" style=\"width:650px;height:400px;\">\n",
    "<caption><center> <u>Figure 2</u>: 2-layer neural network. <br> The model can be summarized as: ***INPUT -> LINEAR -> RELU -> LINEAR -> SIGMOID -> OUTPUT***. </center></caption>\n",
    "\n",
    "<u>Detailed Architecture of figure 2</u>:\n",
    "- The input is a (64,64,3) image which is flattened to a vector of size $(12288,1)$. \n",
    "- The corresponding vector: $[x_0,x_1,...,x_{12287}]^T$ is then multiplied by the weight matrix $W^{[1]}$ of size $(n^{[1]}, 12288)$.\n",
    "- You then add a bias term and take its relu to get the following vector: $[a_0^{[1]}, a_1^{[1]},..., a_{n^{[1]}-1}^{[1]}]^T$.\n",
    "- You then repeat the same process.\n",
    "- You multiply the resulting vector by $W^{[2]}$ and add your intercept (bias). \n",
    "- Finally, you take the sigmoid of the result. If it is greater than 0.5, you classify it to be a cat.\n",
    "\n",
    "### 3.2 - L-layer deep neural network\n",
    "\n",
    "It is hard to represent an L-layer deep neural network with the above representation. However, here is a simplified network representation:\n",
    "\n",
    "<img src=\"images/LlayerNN_kiank.png\" style=\"width:650px;height:400px;\">\n",
    "<caption><center> <u>Figure 3</u>: L-layer neural network. <br> The model can be summarized as: ***[LINEAR -> RELU] $\\times$ (L-1) -> LINEAR -> SIGMOID***</center></caption>\n",
    "\n",
    "<u>Detailed Architecture of figure 3</u>:\n",
    "- The input is a (64,64,3) image which is flattened to a vector of size (12288,1).\n",
    "- The corresponding vector: $[x_0,x_1,...,x_{12287}]^T$ is then multiplied by the weight matrix $W^{[1]}$ and then you add the intercept $b^{[1]}$. The result is called the linear unit.\n",
    "- Next, you take the relu of the linear unit. This process could be repeated several times for each $(W^{[l]}, b^{[l]})$ depending on the model architecture.\n",
    "- Finally, you take the sigmoid of the final linear unit. If it is greater than 0.5, you classify it to be a cat.\n",
    "\n",
    "### 3.3 - General methodology\n",
    "\n",
    "As usual you will follow the Deep Learning methodology to build the model:\n",
    "    1. Initialize parameters / Define hyperparameters\n",
    "    2. Loop for num_iterations:\n",
    "        a. Forward propagation\n",
    "        b. Compute cost function\n",
    "        c. Backward propagation\n",
    "        d. Update parameters (using parameters, and grads from backprop) \n",
    "    4. Use trained parameters to predict labels\n",
    "\n",
    "Let's now implement those two models!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4 - Two-layer neural network\n",
    "\n",
    "**Question**:  Use the helper functions you have implemented in the previous assignment to build a 2-layer neural network with the following structure: *LINEAR -> RELU -> LINEAR -> SIGMOID*. The functions you may need and their inputs are:\n",
    "```python\n",
    "def initialize_parameters(n_x, n_h, n_y):\n",
    "    ...\n",
    "    return parameters \n",
    "def linear_activation_forward(A_prev, W, b, activation):\n",
    "    ...\n",
    "    return A, cache\n",
    "def compute_cost(AL, Y):\n",
    "    ...\n",
    "    return cost\n",
    "def linear_activation_backward(dA, cache, activation):\n",
    "    ...\n",
    "    return dA_prev, dW, db\n",
    "def update_parameters(parameters, grads, learning_rate):\n",
    "    ...\n",
    "    return parameters\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### CONSTANTS DEFINING THE MODEL ####\n",
    "n_x = 12288     # num_px * num_px * 3\n",
    "n_h = 7\n",
    "n_y = 1\n",
    "layers_dims = (n_x, n_h, n_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: two_layer_model\n",
    "\n",
    "def two_layer_model(X, Y, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=False):\n",
    "    \"\"\"\n",
    "    Implements a two-layer neural network: LINEAR->RELU->LINEAR->SIGMOID.\n",
    "    \n",
    "    Arguments:\n",
    "    X -- input data, of shape (n_x, number of examples)\n",
    "    Y -- true \"label\" vector (containing 0 if cat, 1 if non-cat), of shape (1, number of examples)\n",
    "    layers_dims -- dimensions of the layers (n_x, n_h, n_y)\n",
    "    num_iterations -- number of iterations of the optimization loop\n",
    "    learning_rate -- learning rate of the gradient descent update rule\n",
    "    print_cost -- If set to True, this will print the cost every 100 iterations \n",
    "    \n",
    "    Returns:\n",
    "    parameters -- a dictionary containing W1, W2, b1, and b2\n",
    "    \"\"\"\n",
    "    \n",
    "    np.random.seed(1)\n",
    "    grads = {}\n",
    "    costs = []                              # to keep track of the cost\n",
    "    m = X.shape[1]                           # number of examples\n",
    "    (n_x, n_h, n_y) = layers_dims\n",
    "    \n",
    "    # Initialize parameters dictionary, by calling one of the functions you'd previously implemented\n",
    "    ### START CODE HERE ### (≈ 1 line of code)\n",
    "    parameters = initialize_parameters(n_x, n_h, n_y)\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Get W1, b1, W2 and b2 from the dictionary parameters.\n",
    "    W1 = parameters[\"W1\"]\n",
    "    b1 = parameters[\"b1\"]\n",
    "    W2 = parameters[\"W2\"]\n",
    "    b2 = parameters[\"b2\"]\n",
    "    \n",
    "    # Loop (gradient descent)\n",
    "\n",
    "    for i in range(0, num_iterations):\n",
    "\n",
    "        # Forward propagation: LINEAR -> RELU -> LINEAR -> SIGMOID. Inputs: \"X, W1, b1\". Output: \"A1, cache1, A2, cache2\".\n",
    "        ### START CODE HERE ### (≈ 2 lines of code)\n",
    "        A1, cache1 = linear_activation_forward(X, W1, b1, 'relu')\n",
    "        A2, cache2 = linear_activation_forward(A1, W2, b2, 'sigmoid')\n",
    "        ### END CODE HERE ###\n",
    "        \n",
    "        # Compute cost\n",
    "        ### START CODE HERE ### (≈ 1 line of code)\n",
    "        cost = compute_cost(A2, Y)\n",
    "        ### END CODE HERE ###\n",
    "        \n",
    "        # Initializing backward propagation\n",
    "        dA2 = - (np.divide(Y, A2) - np.divide(1 - Y, 1 - A2))\n",
    "        \n",
    "        # Backward propagation. Inputs: \"dA2, cache2, cache1\". Outputs: \"dA1, dW2, db2; also dA0 (not used), dW1, db1\".\n",
    "        ### START CODE HERE ### (≈ 2 lines of code)\n",
    "        dA1, dW2, db2 = linear_activation_backward(dA2, cache2, 'sigmoid')\n",
    "        dA0, dW1, db1 = linear_activation_backward(dA1, cache1, 'relu')\n",
    "        ### END CODE HERE ###\n",
    "        \n",
    "        # Set grads['dWl'] to dW1, grads['db1'] to db1, grads['dW2'] to dW2, grads['db2'] to db2\n",
    "        grads['dW1'] = dW1\n",
    "        grads['db1'] = db1\n",
    "        grads['dW2'] = dW2\n",
    "        grads['db2'] = db2\n",
    "        \n",
    "        # Update parameters.\n",
    "        ### START CODE HERE ### (approx. 1 line of code)\n",
    "        parameters = update_parameters(parameters, grads, learning_rate)\n",
    "        ### END CODE HERE ###\n",
    "\n",
    "        # Retrieve W1, b1, W2, b2 from parameters\n",
    "        W1 = parameters[\"W1\"]\n",
    "        b1 = parameters[\"b1\"]\n",
    "        W2 = parameters[\"W2\"]\n",
    "        b2 = parameters[\"b2\"]\n",
    "        \n",
    "        # Print the cost every 100 training example\n",
    "        if print_cost and i % 100 == 0:\n",
    "            print(\"Cost after iteration {}: {}\".format(i, np.squeeze(cost)))\n",
    "        if print_cost and i % 100 == 0:\n",
    "            costs.append(cost)\n",
    "       \n",
    "    # plot the cost\n",
    "\n",
    "    plt.plot(np.squeeze(costs))\n",
    "    plt.ylabel('cost')\n",
    "    plt.xlabel('iterations (per tens)')\n",
    "    plt.title(\"Learning rate =\" + str(learning_rate))\n",
    "    plt.show()\n",
    "    \n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Run the cell below to train your parameters. See if your model runs. The cost should be decreasing. It may take up to 5 minutes to run 2500 iterations. Check if the \"Cost after iteration 0\" matches the expected output below, if not click on the square (⬛) on the upper bar of the notebook to stop the cell and try to find your error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after iteration 0: 0.693049735659989\n",
      "Cost after iteration 100: 0.6464320953428849\n",
      "Cost after iteration 200: 0.6325140647912678\n",
      "Cost after iteration 300: 0.6015024920354665\n",
      "Cost after iteration 400: 0.5601966311605748\n",
      "Cost after iteration 500: 0.515830477276473\n",
      "Cost after iteration 600: 0.4754901313943325\n",
      "Cost after iteration 700: 0.43391631512257495\n",
      "Cost after iteration 800: 0.4007977536203886\n",
      "Cost after iteration 900: 0.35807050113237987\n",
      "Cost after iteration 1000: 0.3394281538366413\n",
      "Cost after iteration 1100: 0.30527536361962654\n",
      "Cost after iteration 1200: 0.2749137728213015\n",
      "Cost after iteration 1300: 0.24681768210614827\n",
      "Cost after iteration 1400: 0.1985073503746611\n",
      "Cost after iteration 1500: 0.17448318112556593\n",
      "Cost after iteration 1600: 0.1708076297809661\n",
      "Cost after iteration 1700: 0.11306524562164737\n",
      "Cost after iteration 1800: 0.09629426845937163\n",
      "Cost after iteration 1900: 0.08342617959726878\n",
      "Cost after iteration 2000: 0.0743907870431909\n",
      "Cost after iteration 2100: 0.06630748132267938\n",
      "Cost after iteration 2200: 0.05919329501038176\n",
      "Cost after iteration 2300: 0.05336140348560564\n",
      "Cost after iteration 2400: 0.048554785628770226\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nvzPXAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f33c844be48>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "parameters = two_layer_model(train_x, train_y, layers_dims = (n_x, n_h, n_y), num_iterations = 2500, print_cost=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "<table> \n",
    "    <tr>\n",
    "        <td> **Cost after iteration 0**</td>\n",
    "        <td> 0.6930497356599888 </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td> **Cost after iteration 100**</td>\n",
    "        <td> 0.6464320953428849 </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td> **...**</td>\n",
    "        <td> ... </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td> **Cost after iteration 2400**</td>\n",
    "        <td> 0.048554785628770206 </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Good thing you built a vectorized implementation! Otherwise it might have taken 10 times longer to train this.\n",
    "\n",
    "Now, you can use the trained parameters to classify images from the dataset. To see your predictions on the training and test sets, run the cell below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 1.0\n"
     ]
    }
   ],
   "source": [
    "predictions_train = predict(train_x, train_y, parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "<table> \n",
    "    <tr>\n",
    "        <td> **Accuracy**</td>\n",
    "        <td> 1.0 </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.72\n"
     ]
    }
   ],
   "source": [
    "predictions_test = predict(test_x, test_y, parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "\n",
    "<table> \n",
    "    <tr>\n",
    "        <td> **Accuracy**</td>\n",
    "        <td> 0.72 </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Note**: You may notice that running the model on fewer iterations (say 1500) gives better accuracy on the test set. This is called \"early stopping\" and we will talk about it in the next course. Early stopping is a way to prevent overfitting. \n",
    "\n",
    "Congratulations! It seems that your 2-layer neural network has better performance (72%) than the logistic regression implementation (70%, assignment week 2). Let's see if you can do even better with an $L$-layer model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5 - L-layer Neural Network\n",
    "\n",
    "**Question**: Use the helper functions you have implemented previously to build an $L$-layer neural network with the following structure: *[LINEAR -> RELU]$\\times$(L-1) -> LINEAR -> SIGMOID*. The functions you may need and their inputs are:\n",
    "```python\n",
    "def initialize_parameters_deep(layer_dims):\n",
    "    ...\n",
    "    return parameters \n",
    "def L_model_forward(X, parameters):\n",
    "    ...\n",
    "    return AL, caches\n",
    "def compute_cost(AL, Y):\n",
    "    ...\n",
    "    return cost\n",
    "def L_model_backward(AL, Y, caches):\n",
    "    ...\n",
    "    return grads\n",
    "def update_parameters(parameters, grads, learning_rate):\n",
    "    ...\n",
    "    return parameters\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### CONSTANTS ###\n",
    "layers_dims = [12288, 20, 7, 5, 1] #  5-layer model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: L_layer_model\n",
    "\n",
    "def L_layer_model(X, Y, layers_dims, learning_rate = 0.0075, num_iterations = 3000, print_cost=False):#lr was 0.009\n",
    "    \"\"\"\n",
    "    Implements a L-layer neural network: [LINEAR->RELU]*(L-1)->LINEAR->SIGMOID.\n",
    "    \n",
    "    Arguments:\n",
    "    X -- data, numpy array of shape (number of examples, num_px * num_px * 3)\n",
    "    Y -- true \"label\" vector (containing 0 if cat, 1 if non-cat), of shape (1, number of examples)\n",
    "    layers_dims -- list containing the input size and each layer size, of length (number of layers + 1).\n",
    "    learning_rate -- learning rate of the gradient descent update rule\n",
    "    num_iterations -- number of iterations of the optimization loop\n",
    "    print_cost -- if True, it prints the cost every 100 steps\n",
    "    \n",
    "    Returns:\n",
    "    parameters -- parameters learnt by the model. They can then be used to predict.\n",
    "    \"\"\"\n",
    "\n",
    "    np.random.seed(1)\n",
    "    costs = []                         # keep track of cost\n",
    "    \n",
    "    # Parameters initialization.\n",
    "    ### START CODE HERE ###\n",
    "    parameters = initialize_parameters_deep(layers_dims)\n",
    "    ### END CODE HERE ###\n",
    "    \n",
    "    # Loop (gradient descent)\n",
    "    for i in range(0, num_iterations):\n",
    "\n",
    "        # Forward propagation: [LINEAR -> RELU]*(L-1) -> LINEAR -> SIGMOID.\n",
    "        ### START CODE HERE ### (≈ 1 line of code)\n",
    "        AL, caches = L_model_forward(X, parameters)\n",
    "        ### END CODE HERE ###\n",
    "        \n",
    "        # Compute cost.\n",
    "        ### START CODE HERE ### (≈ 1 line of code)\n",
    "        cost = compute_cost(AL, Y)\n",
    "        ### END CODE HERE ###\n",
    "    \n",
    "        # Backward propagation.\n",
    "        ### START CODE HERE ### (≈ 1 line of code)\n",
    "        grads = L_model_backward(AL, Y, caches)\n",
    "        ### END CODE HERE ###\n",
    " \n",
    "        # Update parameters.\n",
    "        ### START CODE HERE ### (≈ 1 line of code)\n",
    "        parameters = update_parameters(parameters, grads, learning_rate)\n",
    "        ### END CODE HERE ###\n",
    "                \n",
    "        # Print the cost every 100 training example\n",
    "        if print_cost and i % 100 == 0:\n",
    "            print (\"Cost after iteration %i: %f\" %(i, cost))\n",
    "        if print_cost and i % 100 == 0:\n",
    "            costs.append(cost)\n",
    "            \n",
    "    # plot the cost\n",
    "    plt.plot(np.squeeze(costs))\n",
    "    plt.ylabel('cost')\n",
    "    plt.xlabel('iterations (per tens)')\n",
    "    plt.title(\"Learning rate =\" + str(learning_rate))\n",
    "    plt.show()\n",
    "    \n",
    "    return parameters"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You will now train the model as a 5-layer neural network. \n",
    "\n",
    "Run the cell below to train your model. The cost should decrease on every iteration. It may take up to 5 minutes to run 2500 iterations. Check if the \"Cost after iteration 0\" matches the expected output below, if not click on the square (⬛) on the upper bar of the notebook to stop the cell and try to find your error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after iteration 0: 0.771749\n",
      "Cost after iteration 100: 0.672053\n",
      "Cost after iteration 200: 0.648263\n",
      "Cost after iteration 300: 0.611507\n",
      "Cost after iteration 400: 0.567047\n",
      "Cost after iteration 500: 0.540138\n",
      "Cost after iteration 600: 0.527930\n",
      "Cost after iteration 700: 0.465477\n",
      "Cost after iteration 800: 0.369126\n",
      "Cost after iteration 900: 0.391747\n",
      "Cost after iteration 1000: 0.315187\n",
      "Cost after iteration 1100: 0.272700\n",
      "Cost after iteration 1200: 0.237419\n",
      "Cost after iteration 1300: 0.199601\n",
      "Cost after iteration 1400: 0.189263\n",
      "Cost after iteration 1500: 0.161189\n",
      "Cost after iteration 1600: 0.148214\n",
      "Cost after iteration 1700: 0.137775\n",
      "Cost after iteration 1800: 0.129740\n",
      "Cost after iteration 1900: 0.121225\n",
      "Cost after iteration 2000: 0.113821\n",
      "Cost after iteration 2100: 0.107839\n",
      "Cost after iteration 2200: 0.102855\n",
      "Cost after iteration 2300: 0.100897\n",
      "Cost after iteration 2400: 0.092878\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n6lMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f33c8455ef0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "parameters = L_layer_model(train_x, train_y, layers_dims, num_iterations = 2500, print_cost = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "<table> \n",
    "    <tr>\n",
    "        <td> **Cost after iteration 0**</td>\n",
    "        <td> 0.771749 </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td> **Cost after iteration 100**</td>\n",
    "        <td> 0.672053 </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td> **...**</td>\n",
    "        <td> ... </td>\n",
    "    </tr>\n",
    "    <tr>\n",
    "        <td> **Cost after iteration 2400**</td>\n",
    "        <td> 0.092878 </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false,
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.985645933014\n"
     ]
    }
   ],
   "source": [
    "pred_train = predict(train_x, train_y, parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<table>\n",
    "    <tr>\n",
    "    <td>\n",
    "    **Train Accuracy**\n",
    "    </td>\n",
    "    <td>\n",
    "    0.985645933014\n",
    "    </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8\n"
     ]
    }
   ],
   "source": [
    "pred_test = predict(test_x, test_y, parameters)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Expected Output**:\n",
    "\n",
    "<table> \n",
    "    <tr>\n",
    "        <td> **Test Accuracy**</td>\n",
    "        <td> 0.8 </td>\n",
    "    </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Congrats! It seems that your 5-layer neural network has better performance (80%) than your 2-layer neural network (72%) on the same test set. \n",
    "\n",
    "This is good performance for this task. Nice job! \n",
    "\n",
    "Though in the next course on \"Improving deep neural networks\" you will learn how to obtain even higher accuracy by systematically searching for better hyperparameters (learning_rate, layers_dims, num_iterations, and others you'll also learn in the next course). "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##  6) Results Analysis\n",
    "\n",
    "First, let's take a look at some images the L-layer model labeled incorrectly. This will show a few mislabeled images. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAADEcAAAFYCAYAAAALXXMiAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAPYQAAD2EBqD+naQAAIABJREFUeJzsvXm0bVld3/uduz397bvqG6Dog1hCgg+wwWRoeNEHOtKK\nxhgTTKIxyRtRiWLykmFiEmOMz5foExuMGnma2CGI0gglUoBAQVENt/q6dft7zz3t7tf7Y+/int93\n7tr7nGq4d+/z+Yyxxrm/veaaa7bf+ZtzrnVXKopCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAk0rp\nSicAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADgmcDLEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMNHw\ncgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEw0vBwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATDS9H\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADARMPLEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMNHwcgQA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEw0vBwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATDS9HAAAA\nAAAAAAAAAAAAAAAAAAAAAAAAAADARMPLETCSlNLrU0q9lNLrtvz2Cymlh57Fe3z74B43PFtxAsDu\nAI0CANgZ6CYAXK2gTwCwW0DvAAC2D5oJALsF9A4AdgNoHQDsBtA6ANgNoHUwCfByxFVMSunbBh38\nyWMzpXRfSum/pJQOfwmTUgyxezuNJKX0Aymlb3yK+P0eU8OIfANMNGgUPFegmzCtoJvTARoF0wj6\nBM8VaCZcbaB38FyB3sE0gmZOB+gTwHjQu+kAvQMYDVo3HaB1AKNB66YDtA5gNGjddIDWPffwcsTV\nTyHpX0j6W5L+gaQ7JL1V0p+klGauUJq+U9ILn8Z1PyhpWIf+JUmzRVE8+oxSdfXyVPkGmAbQKHgu\nQDdhmkE3Jx80CqYV9AmeC9BMuBpB7+C5AL2DaQXNnHzQJ4Dtgd5NPugdwHjQuskHrQMYD1o3+aB1\nAONB6yYftO45pnKlEwDb4j1FUfzZ4N/vSCldkPR96neO/zHsgpTSXFEUG89FYoqi6ErqPovxFZJa\nz1Z8APAlB40CANgZ6CYAXK2gTwCwW0DvAAC2D5oJALsF9A4AdgNoHQDsBtA6ANgNoHUAI+DLEZPJ\n+yUlSTdLUkrp2wefyHldSumnU0qnJT32ZOCU0jUppXeklE6llBoppc+llP62R5pSujal9L9SSmsp\npdMppR+XVB/ca2u4X0gpPWS/pZTS96aU7hp8qudMSun3U0qvHJzvSZqT9GRaeymld1j6b7A4v3uQ\n1kZK6URK6adSSnsszAcH93xRSukDKaX1lNLjKaX/c0j+rk8p3badAk4p1VNKPzL45NBmSumJlNJv\npJRu3hLmn6WU7kgpnUspbaSUPpFSerPF85T5Bphi0KjLYZ51jUopvX6Qnm9JKb0tpfTYIE9/mFK6\ndUj4bxno00ZK6WxK6Z0ppWuGlNnqoC7+1+DfZ1JK/z6llDzOp0gXugnw9EE3L4fBtwO4ukCfLofB\nr0MzYbpB7y6HQe/QO4BxoJmXwzCHBZhu0LvLYdA7gOkFrbscBq0DmF7Qusth0DqA6QWtuxwGrQO+\nHDGhPG/w9/zgbzH4+9OSzkj6l5LmJSmldFjSx9R/K+snJZ2T9PWSfi6ltFgUxU8Ows2oL5DXSfrP\nkk5K+lZJX7Ml/icphvz2DknfJun3JP2s+m3rtZL+vKQ/U/8TPj83SMvPDK554KniSyn9iKQflvQH\ng3zdJum7Jd2eUvrKwZtmT167X9LvS/pNSb8m6Zsl/duU0l1FUbx3S7TvlPQ6jXkpKKVUGuTjqyX9\nqqSfkLQo6eskvVTSkyL+PZJ+S9IvS6pJ+muSfj2l9MaiKH5/EGZUvgGmFTTqOdSoLXy/+uX27yXt\nkfTP1dejv7Alnd8+yPvHBuGPSPrHkl6TUvqyoihWtqSzJOm9kv5U0j+V9AZJ/0TScUn/bVRC0E2A\nZwy6iW8HcLWCPuHXoZmwW0Dv0Dv0DmD7oJnMYQF2C+gdegewG0Dr0DqA3QBah9YB7AbQOrQOtlIU\nBcdVeqgvDF31O9QBSddK+quSzkpak3RsS7iepA9KShbH/yvpcUl77fdfkXRBUn1gf+/gXm/aEmZG\n0v2D31+35fefl/TgFvurB/f/8TH5WZX0jhH5vGFgH5TUkPRuC/fdg3DftuW3Dwx++xtbfqtKekLS\nr9v1H5DU2Ua5/+1Bfr5nTLi62WVJd0l633byzcEx6QcadcU06vWD/HxOUnnL7/9ocK8XD+yKpFOS\nPi2ptiXcNwyuf7uVWVfSD9q9Pinpzm2kCd3k4NjGgW7i23FwXK0H+oRftyUcmskx1Qd6h95tCYfe\ncXCMOdBM5rAcHLvlQO/QOw6O3XCgdWgdB8duONA6tI6DYzccaB1ax7G9Y7v/qxdcOZKkP1JfvB5T\nX4BWJH1TURQnt4QrJP1sMeg5W3iTpN+RVE4pHXjyUP/tqb2SXjkI9/WSThZF8ZtfjLAoGrr8ZtIo\n3qx+x/9XO83cU/AG9cXoJ+z3n1VfFP6y/b5WFMWvPGkURdGWdKekW7YGKoriq4ui2M7XUt6kfnn/\n1KhARVE0n/x3SmmvpH2SPqzLZQqwG0CjLvOl0qgneUdx+Y1Xqa8/aUu8t0s6LOmni6JobbnPuyXd\nOySdUv4/a37Y0/kUoJsA2wfdvAy+HcDVBfp0Gfw6NBOmG/TuMugdegcwDjTzMsxhAaYb9O4y6B3A\n9ILWXQatA5he0LrLoHUA0wtadxm0Doayk80ruDIU6r/d9AVJHUmni6K47ynCPrzVSCkdUl+svkvS\n33uKuA8P/n2j+p+cd57qXlu5RdITRVEsbyPsdrhx8Pf+rT8WRdFOKT245fyTPD4kjouSXvY073+r\npPuKouiNCpRSeqOkt0l6haT6llMjrwOYMtCoAV9CjXqSx4bEKfWdKg3SUXg6B9wr6Svtt0ZRFOft\nt4tb4lNK6aD6b7Q+yVpRFOtCNwF2Aro5AN8O4KoDfRqAX4dmwtSD3g1A79A7gG2AZg5gDgsw9aB3\nA9A7gKkGrRuA1gFMNWjdALQOYKpB6wagdfBU8HLEZPDxoij+bBvhNs1+8ssgvyzpF5/imruedqqu\nHrpP8Xt6rm6YUnqtpN9S/7NDb5V0UlJb0ndI+uvP1X0BrlLQqNE8Vxr1bMf7VPFt5eO67EwWkv6l\ntvmGL7oJEEA3R4NvB3DlQJ9Gg18nNBOmBvRuNOid0DuALaCZo2EOCzA9oHejQe8ApgO0bjRoHcB0\ngNaNBq0DmA7QutGgdbscXo6Ybs6q/8mYclEU7x8T9hFJLxny+wu3cZ8HJP3FlNLeMW96+ed5RqVF\nkm7TljfXUkpVSTdLet8243m6PCDpVSmlclEUTyWSb1J/4PhLRVF0tqTx7wwJu918A+w20KjnlkfU\nd+huU9/p2sptupyPnfA3JM1usR8c/EU3Ab40oJtPDzQK4LkHfXpuwa8DuHpA755b0DuA6QLNfHqg\nTwCTB3r39EDvACYLtO7pgdYBTBZo3dMDrQOYLNC6pwdaN2GUxgeBSWXwCZffkPTmlFImUoPPyj/J\nuyVdk1J685bzc5L+7jZu9Rvqt6W3jwm3rv4necbxh+q/MfU99vt3SlqS9LvbiCMjpXR9Sum2bQT9\nDUmHJP3DEWG66gvUF18wSindJOkbh4Tdbr4BdhVoVGQHGrVdPiHpjKS/P3AEn7zP10t6kZ5GOoui\n+GhRFO/fcjw8OIVuAnwJQDcj+HYAVw/oUwS/LoBmwlSB3kXQuwB6B2CgmRHmsADTC3oXQe8AphO0\nLoLWAUwnaF0ErQOYTtC6CFo3vfDliKuf7X7G5anCfb+kr5L0sZTSz0r6vKT9kr5c0tdIelLMflb9\njvvOlNLt6n/S5VvV74QjKYrigymld0r6npTSCyS9R31he62k9xdF8dODoJ+U9IaU0vdJekLSQ0VR\n3DkkvnMppR+V9MMppfdI+m313zZ7q6Q7Jf33cWl6Ct4p6XUa/1LQL0l6i6QfTym9WtKHJS1I+lpJ\n/3dRFL8j6fck/RNJ700p/YqkI5K+W9IXJL3c4ttWvgEmFDTqS69R26Ioik5K6Z9LeoekP04p/aqk\no+o7iQ9K+oln4z4D0E2A7YNu4tsBXK2gT/h1EpoJuwP0Dr2T0DuA7YJmMocF2C2gd+gdwG4ArUPr\nAHYDaB1aB7AbQOvQOhhHURQcV+kh6dvUf5volc8knPpi9ZPqf06mIemEpD+Q9B0W7jpJ/1P9z+ac\nlvQfJX3dIO7XbQn385IesGuT+h37bvU/DXNK/bexXrElzAskfUDS2iDOd1j6b7A43zqIr6G+APwX\nSUsW5gOSPjMkz8PS+AFJnW2WfV3Sv5J0fEuZ/Zqkm7aE+XZJ90raGKTzLeq/6da1uIbmm4Nj0g80\n6spolKTXD9LzJvv9xsHvb7Hfv1n9/31zQ/1Po/2ipGND0nNpyL3ejm5ycDx7B7qJb8fBcbUe6BN+\nnYVFMzmm9kDv0DsLi95xcIw40EzmsBwcu+VA79A7Do7dcKB1aB0Hx2440Dq0joNjNxxoHVrHsb0j\nDQoaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgInlWPnkOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABw\npeDlCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmGh4OQIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYa\nXo4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAICJhpcjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgouHl\nCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmGh4OWIXkFL6hZTSQ1c6HQAAkwK6CQBXM2gUAMDOQDcB\nYDeA1gHA1QwaBQC7AbQOAHYDaB0A7AbQOgDYLaB3MM3wcsQEk1JaTCm9PaX06ZTSakppI6X02ZTS\nv00pHdsStBgccIVJKR0b1NnLr3RaAHYj6OZo0CiAKwsaNXmgmwBXFnRzNGgUwHSA1o0GrQO4sqBR\nkwe6CbBz0LrJA60D2Dlo3eSB1gHsHLRu8kDrAJ4e6N3kgd49+1SudALg6ZFSukXSH0q6TtK7JP03\nSS1JL5f0HZK+SdILr1gC4am4RtLbJT0k6a4rnBaAXQW6uS3QKIArBBo1saCbAFcIdHNboFEAEw5a\nty3QOoArBBo1saCbADsArZtY0DqAHYDWTSxoHcAOQOsmFrQOYIegdxMLevcsw8sRE0hKqSzpNyUd\nkvT6oig+auffJumfX4m0wVjSlU4AwG4E3dw2aBTAFQCNmmjQTYArALq5bdAogAkGrds2aB3AFQCN\nmmjQTYBtgtZNNGgdwDZB6yYatA5gm6B1Ew1aB7AD0LuJBr17lild6QTA0+Kb1X+T61+7gElSURRr\nRVH80KgIUkr/LKV0R0rp3OCzOZ9IKb15SLivSyl9OKV0cfCJnXtTSv/GwvyjlNLnUkrrKaULKaWP\np5T+moW5LaV0/biMpZR+JKXUSyndmlL6hcF9l1NK70gpzVjYckrph1JKx1NKjZTSQymlf5NSqlm4\nh1NKv51S+sqU0sdSSpsppQdSSt86Lj1b4rgmpfRzKaUTg3s9mFL66ZRSZXB+X0rpP6SU7hqU06WU\n0ru3fuYmpfR6SXeq/ymiXxjks5tSest20wEAT5up1c1BWDQKYLKZWo3CtwOA54ip1c1BWDQKACS0\nDq0DuLqZWo1KzGMB4DJondA6gF0AWie0DmAXgNYJrQPYJaB3Qu+gD1+OmEz+ivod4ZefQRzfI+m3\nBnHUJP01Sb+eUnpjURS/L0kppRdL+h1Jn5b0Q5Kakp4n6TVPRpJS+ruS/rOkX5f0E5Jm1BfYV0v6\ntS33u0fSByV9zZh0FYO/vy7pQUnfL+mVkr5T0mlJP7Al7M9Jessg7H8Y3PMH1P/sz1ZBLiQ9X/3P\nBP2cpF9Q/xNBP59S+kRRFPeMSlBK6Zikj0taUv8zQ/dJulb9wWRO0oqkW9Svl3ep/2mbI5L+nqQP\nppReXBTFqUEZ/LCkfzWI58ODW/zJmDIBgGfO1OomGgUwFUytRgnfDgCeG6ZWN9EoANgCWofWAVzN\nTK1GiXksAFwGreuD1gFMN2hdH7QOYLpB6/qgdQDTD3rXB70DqSgKjgk7JH1S0oUdhP95SQ/ab3Wz\ny5LukvS+Lb99r6SupH0j4v6fku7aRhq6kv5oG+HeLqkn6Wfs99+QdGaL/fJBuP9q4X5scK/Xb/nt\nocFvr9ny20FJm5J+bBtp+kVJbUlfNiJMdchvNwzu8bYtv335IN1vudLtiINjNx1TrptoFAfHhB9T\nrlH4dhwcHM/6MeW6iUZxcHCoKNA6tI6D4+o+plyjmMdycHCoKNC6gY3WcXBM+YHWoXUcHLvhQOvQ\nOg6O3XKgd+gdx+WjJJhEliStPpMIiqJoPvnvlNJeSfvUf+PolVuCLQ/+/h8ppfQUUS1Lui6ldPuY\n+5WLovja7SZP/TegtvJhSQdSSgsD+xsG4f6ThfuPkpKkv2y/f74oii++SVUUxTn139S6ZVRCBvn+\nRkm/XRTFp54ywUXR3nJNKaW0X9LG4B6vfKrrAOBLxlTqJhoFMDVMpUZtDS58OwB4dplK3USjAMBA\n6y5fg9YBXH1MpUZtDS7msQCA1kloHcBuAK1D6wB2A2gdWgewW0Dv0DsYwMsRk8mKpMVnEkFK6Y0p\npY+mlDYlXZB0RtJbJe3ZEux/SLpD0s9KOp1S+tWU0reYoP07SWuS7kwp3Z9S+qmU0mv0zHnU7IuD\nv/sGf29U/02p41sDFUVxWn1hvXFMfE/GuU/6ovAcsaMq6ZD6g8bdoxKb+nxfSul+9T8TdE79Mn2Z\nYpkCwJVhWnUTjQKYDqZVo7aCbwcAzybTqptoFABsBa1D6wCuZqZVo7bCPBYA0Dq0DmA3gNahdQC7\nAbQOrQPYLaB36B0M4OWIyeReSXtSStc+nYtTSq+V9Fvqv4H0VklfL+kNkn5F/bejJElFUTSKonjd\n4Nwvqd8h/4ekP3hSyIqiuFfSbZL+qvpvYb1J0kdSSm9/eln7It2nSr7ZxbMU3/WSTkp6Ysvfv7DN\nuCXpbeq/XfZBSX9T0l9Uv9w+L/oZwNXAbtDNUaBRAFc3u0Gj8O0A4NlkN+jmKNAogN0BWofWAVzN\n7AaNYh4LAGjdZdA6gOkFrbsMWgcwvaB1l0HrAKYb9O4y6N0up3KlEwBPi9+R9Ncl/S3137DaKW+S\ntCnpLxVF0Xnyx5TS3xkWuCiKD0j6gKR/llL6AUn/WtJXS3r/4PympHdJeldKqSLpf0p6W0rpR4ui\naD2N9G2HR9QXh+er/4mZJ/NwWNLewfmdcEp90dnKZ9R/m25F0kvHXP9mSe8viuK7tv6Y+p8WOrvl\np+2KLgA8u0yrbp4VGgUwDUyrRu0EfDsA2AnTqpv4dgCwFbQOrQO4mplWjdoJzGMBph+0Dq0D2A2g\ndWgdwG4ArUPrAHYL6B16BwN482Qy+f8kfVZ9ofjzfjKltJhS+tcjru+q35m++HJMSukmSd9o8exT\nzmfUfyuqPgizf+vJgSjeMwhT3RLXbSml60dlaoe8e3CPf2y//1P18/Z7O4msKIpmURTvt+NSURSF\npP8l6X9PKb1yRBRd2dtnKaVvkeRv4a0P/u7dSfoA4BkzlbqJRgFMDVOpUTsE3w4AdsJU6iYaBQAG\nWofWAVzNTKVG7RDmsQDTD1qH1gHsBtA6tA5gN4DWoXUAuwX0Dr2DAXw5YgIpiqKTUnqTpPdJ+uOU\n0q9LukNSW9JLJP0NSRck/YuniOL3JP0TSe9NKf2KpCOSvlvSFyS9fEu4H04pvW4Q/pFBuLdKelTS\nRwZh/iCldGpw/9OSXizpH0j63aIo1rfEdY/6n4b5mqef88sURXFXSukXJX3XQGw/JOnVkt4i6TeL\novjQs3GfAT8o6evUL+ufUT8v10j6ZklfWRTFiqTflfRDKaV3SPoT9T8V9DclPWBxPSBpWdLfTymt\nqS9qHyuK4uFnMb0AYEy5bqJRABPOlGvUtsC3A4CdMOW6iUYBgCS0TmgdwFXNlGvUtmAeCzD9oHVo\nHcBuAK1D6wB2A2gdWgewW0Dv0DvYQlEUHBN6SFqS9HZJn5a0KmlD0uck/aikI1vC/bykB+zab5d0\n7+Cau9Xv/G+X1N0S5qsk/aakx9T/XM5jkt4p6dYtYb5T/U/jnBnEdf/g/gt2v66kP9pGnt4+CLvf\nfv+2we83bPmtpL5QH5fUkPSwpP9LUtWufVDSbw251we2k6ZB2OsG5XhqkM8vSPrPkiqD8zVJPybp\ncUlr6ovqq9T/RNAfWVxvVP8NveYgT2+50m2Jg2O3HNOom4OwaBQHxxQc06hRwrfj4OB4Do9p1M1B\nWDSKg4Pjiwdah9ZxcFzNxzRqlJjHcnBw2IHWoXUcHLvhQOvQOg6O3XCgdWgdB8duOdA79I6jUBoU\nKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwERSutIJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeCbw\ncgQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEw0vBwBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATDS9H\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADARMPLEQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMNHwcgQA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEw0lSudAEm69lU3FlvtcjW+s1EuR7tULex8OYuzXq5Fuxrt\nTrcT7FanHc/3usEuSineICZBjc3NLA0XHj8fw5xtxAAxCVKK95ip1YO9b89isGfr8fzF5oUsDY3s\nl3iPrpVD1/NdxIwmy3eyNJcq+fs2RYxStZlqsOf2xGu6pViWvY3ZYFc0H+1ybMblct6sK5V4z2rV\n7ViW1ZLHGfNZ8TZp7aPT88qVVjfXgt0qNoJ948v3BXv2VqurhRj+yI1zwV461Av23EwsN0nav/e2\nYDe6MR/1+kKwDy3GNO2djefPN1aCvdmNeWy0WlkaKs1Y9mkz5vOxx2K/+U9f/YvW+SaeYnyQUcGf\n++LoXXoo2Bfv/niwz5w4HezW+nIWR6exHuxuN2qsZ6NsfbRsml2qzQR7Zj62xQXTx/ps3v5nZ2Of\nqd/8injPpevtiqu/6RXePnqxnFcevSPY68f/JNif+sTdwb73gSeyexx/NPbJY/v3BLu5Hut6rhLL\nrVaOaaxXor7WLHy7FfWzuR61T5LSRtSa1Ua85rV/628G+2vf+u8sgpiGQq5V1l6LaKfWapYmVWIb\n7ZVim0w9y0fzRDw/97Krv8HtgLNnz4aK73aiM5BKcfzp9eIY5v6FJBWFh5HZo+Ms2T273Xi+Uon+\npF8v5T6n+0lfCrwcxmnVsLIcHb/5fkPrItrNVvTdSimWk/tZfg+rmqxuSqXc15fGt5lR5Pkc136G\nlcPoODwfnsaxZe3nh6TB6dg9m604G/D5RU68R9nKvuuO/ZBrPJXJfjl67PDU6N0vf+d8qKRWJ7YB\nn3PMRPdGyvqzlKzeN3qxDko2T5mv2vyt3Qx2sxNv2uzF4t+Iwfv3sLmMt/+FekxjYe1urRmvb3di\nHlLy+XzeJMopxnnBhtGSlVMtdUeer9g921b0K/m0RVWbVu6bt/OmXebyZPfY7MR8XogulGpDpgld\n71+Wr5mK5yuG9zzMWiJL2fw+S4Jk9b9pMtCyOEoarV2dTjy/2bQ1hdhtJEmLuWsfaFr9NW0hpGWJ\nvNiy+b3X5ZBy6FnZ91zTrb7/y0c7U6N1P/hPvzVkfn4++r2zc3FsqZv2pVK+RrNv/95gH9sf41yc\njQXq88nVCxeD/dC9DwT7/BMn4w2LvDqqNdfoqJfJ1n1a1vZnDsX5Y6UWG+qJBz4f7D21vI/XK+7j\nuIMbzYqVrfum3qc77nMN8+tsHVBjfKKu2W0vl4M3Bnv/0VhOlx79bJaGbiPO74ohfvhWSlYwJaur\nss05e/JyGBKptZFu1+YvXta29pjsHp326PlPtepOQX6PwtNQiQNR/cCtwf6d998Z7Pd8MK4HrKzG\nNbztzGW8H+zZcyDYJ088PjVaJ0mnjlovcvnywd4HjGE7LV5CvnTutt+jMuYe3q8rPscYkia7Z+H5\nKI8eywuXLk+zdzK3fYNBkjxOy6fLePLwY8vVbC8XL9dhQjEmjePj9H2WnZZrnqSx+fY0eV1nmz07\njH9YmsbF4dVv+fa6Lcb9927bWZYZlyYPbueP/J3uVGndibPdkaXmmW13o7O92cjXatc24xhz/MFP\nBXt19Vywjx56QbAr9TjG7bV9qeuvuSnecEgOGq2YrqZNCmq2HjJr93Q/yW/he6m+3iJJPVszqVej\nj1sxH8XXKne6E9QdsqZQ8gbscbr2ZDcZ16nGd4ezF08F+xOf/UCwW5txIeL0ubi3fczq+0XPf2m8\n3ur2uqPR/5Tyseuexz4X7Ifv/XSw//KLXxfsT7ZjfZ8/GcNvlg8Fu3b0JUPSEOOY68ZFgHor9ovW\n+YeD3VyNexDdTpwL9Hz9tJ5Ppnu2frOxEfvJgs0v/tG3f9/U6N0f/vEnQuYP7l8K54+fjO1utRX7\nziHbB5OkpVpsu5/uxTr65htvCva7fu03g33t0SPB/oqX3BLszx1/ONidUr6O+/jjcQ/vxCNxP7ft\nCyK2trtmE9uW7ZVl69kb+bMnvWZsy+WFWFZHjx0L9r59cQ5x263PC/bB/fH83n2Hg725mevtQ8dj\nn263Yt3ccmt8HuLIkVj2jUaMc9b3lN1fLvLnPmbm4jgyNx/3BGfsOY2q+WHj9go2G3H8PXchjrWS\n9EfvfU+w1zdivtZO3BXs6/faems3lv2bv+MfxhuUYxv8d78c95glac6k56u+7Npgn7oQ+0mlYmvV\nNnd+4PFLwb72cHwe4Nxy/kzWG151XbCrtdF7fa9+8W1To3U33HxNaDg+h0/emJO3w+049LYGM8Zn\nyp4fM38ZscrzAAAgAElEQVRn3Pn+b7YGk/WXWKf+vESWb09ltl42vhx6Y6ZOYy7P9sk8QDF0L3b8\nfu1WysnLOp5338GfDfT17zyVeaS+h+hrdH59YQWZ7XkPcUUL2R6Y9Wkvp6x9ZPnyfmBnh5SzP0Mw\nuxD18cjz4zXXv9TW9Hox/MqZOE/oLMe18mov90Nq5rd1iqivm50Hg/2r7/j41GidJL3sFS+Lvt2x\n/eF8px33DzY24nix2co3Q/25YV8nL7LJ0mhtcS0pm779hdv/XLBnSvmY9r4Pxbn04v447/B1HG/d\nHXsmx+exZX8W1ueoQ563zR6XHtOnsj6ZxTj6eQiP3jV+2Jq2151341e8LM7X3v6274/Xt2Ocn7vr\nE8H+7+/67WC/5z0fDPZMLR9H/vob3xDsj975Z/EeD8TnxfYfiv1+bk+cv2TjhO/rbINi2JrsFnL5\nG/0MSKbhY9Yjho6eY8bLIktDtL/wmXvGah1fjgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgImGlyMA\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCiGfax5y85M3NzwfZPyyT75HBRip8GqVXGf7O6ZZ+K6RTx\nkzqtIn6aLo/NPgdlaZybj5/Ok6TukZjOtn06ttSL6V5YjJ+F27fgdvwcn+wTfpfOL2dpUG/0Z378\n01qycvJPaSX7PI1/Yqdcyd+36dlnAuuz8ZNR9Xq8Ztk+b1TpeXsY/f3mYZ9/yz7PZu2jbOcr9rmv\nsn3a3s/3ZJ8gG/I525791mpE+/G74+cQb5iJn8ip3hzjW1uJn32qzsU0Ls7ln9pK1uUrXnY9bw/R\nrvTiJyAr7fgJ1vVWbD+9/Ju8atnniLqdeM2evXlf2l3Yp496pk2l+Im1Ps/uF9FSJfbRsrV3/2xW\nuzOkvdvnukpjPsecvA91o0Z329YWW7FcOo0YPpXyTwh32vFTr71H7w727K02Fs3Gz4nuvJy38133\n0dcU3aiHnU371PL62WA3Vi8G+6O/82vB7q7GceLE6ag75y+u5SmyTxP27JPSXrctO5+seeSfjo26\nNDNjn27rxU+sStLqRmwPq9Zt9l5vgpmiPo4j//xmHiL7ZYfVncZ8smzSyT5nN+YT7e5X+Wfoh12T\n3WLMp1z9F/8s3LBP8GUx7LSix6bBPzMYQ3d7+eea3YcZ8k3T0SkY8xlW/8Swf762HybGUbVPIe+0\nmPK6zEIMuWrMJ2h3+EnHcQwL7uWQTPB6Vn/JyjL79GB+V7vh6DT20xDtejXX0FHh/bO5eR6HKeLo\nz1luI9kTS7MVy2N+1vqLOU3u75RLea13bd65byHqY6sd41yP7o1KhX8CNYZvbFpfyOaLUmHj5kzZ\n5tI2R1jbiJrd7MXra5bPno2BlSFzhoalq2lyuKdiLcvaauZ7Wrv0uqsMkc595nbXLUzXPwFt9d21\nJNg0V3OexiG+QdU12867NpWq1iZrVi5W1uX8w+dZGtZ9euJp9GHJppS2bKFkaahawc7V83LwL9J6\nCG9T/t+ArNs9a5bmml3fHuKGeF+yL2lrc4rFrl63Pl2LOuNrchX7xHe5ms/N6rX4W606us8mq/VK\nPa5NLB6+PtjNVqyQ9lqc90jKdKNr/ueM+TelepwnV+txjW7W1uyq83FNZmUlzt0k6cieGGeydpa5\nAraulLoxfLvjvoevj43/bHE2dpndacVENRTr4uCB6yw+y+OQuVnZfKTChKTbjfnO5muWz2rdfVP/\nlPeQj3nbPUvdrgcYGb5n4b3cSr6uMsTHdsr1uEZRW4xle3YtroPc/+AjwW7b5+TH+55D/DrL16Y7\nHtPGuC7j570ah03Fxl2TnU+jz/u4W7Y6cxkZ9l9jeRp8a2X00vuQNI1Ls7W2Yc3f0uD58HlItqYy\nLt9ZudsFPlQNK7dx5WD3yKZOPv/3NGX2uLn/kGvGteEx4bNP149t80P0tDQmDvOZsrWZ7J5j1pTH\nrgUpT+fo5YSs/U0ba43VYLdajWDPz8Z9yUYzav+wOeSFi08E++KlaPs1VfOr9i7tC3bF/Mv1Rlyz\n3tiIeZCkSytx3XzfnsMxQBwW1bR8Z2vcnXhBtWz+ay3mQZI6XdvLsaKqVKO/OG4dyNdoNqwcur18\nElKvxolsuWy+evmZPhYQ03Ru+XQW4uS56JMsXzwT7OMP3R/s2dreYJ86dSrYjz56PNjXHIu+/3Ir\n3xt/+GS8x+mzjwa7thr3V+879kCw1zfjPktqxbI/OhvLvr5iE35JySaNjVa858qleI/WSmzX+/2Z\ngWv2B3vT/LTTy5eyNDQ3Y7r2WN8rp6viMZHnhNtfcVuwl9diWaw/HNvZNfvjnvyx/fk8dsb2Tp93\n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\n3+4CdXveBt0Ji2a56usssd9IUnlmKdrzcWy698HHgn3nn3062E2rS/dLsiEhS4Fkw2vmG3ZcDKeN\nipWSa7vbXojDxoKdXpOFt7ZmY71PnV0Ph0ytpdIYn8Tbs8fh4f28xz8uj9u5pw8l48Jn97Tw7pdZ\n+KxPSyqsLrxPtTbiNSdXon1qJYZfN39mv/lEt14b7cU9Q/z2ceXk9pg+7n0gaz/mQ22rLrP2MsYJ\n9vYzbuqe5XHIBTudkg7rN1PEZ+7+SLBnbC+gZP7ExUuPBvvRx7+QxXnsyIuCvbS4L9jrmw8H+4FH\n7wn2yvqJYC/Mxg6xMB99uYNLh7I0bDbiWv7pC08Eu9WJPuyj6+eDPTMT77lv6Zpgd21eOzcXfSJJ\nKpt/WCtHX+3BR+4Ldt32BM9Zms+ci3a1Ev2Hxma+v1C2Bl+zNdnNubVgu88z4/uUhvsCs7XFLMy5\n07E+z1+I97zmmug/1udivpqd6CMvFPF853z047vLNhmXdPONNwW7thDra20j7oUumg+75BNVK6f1\nZvS7zl2Me6eS1FiP6Zq39nH4cGzHpXqsqwtr0Y9eWY0Dyayt4e5d2pOloWVu9cNnYj/5wkOxf08T\ni6XYbvbXotbVbJ5a7sRB7cabogZI0t4DsV20Ltie4qNxj/Dmmdg/2hdim2h14n5wyfYcL9Xs+RhJ\nFy7FOnzNK14c7Ll61PAHT5wJdq0c/YlKJ7ar+Wpsl525fB57x9mYj8WlOI+5YGsq7sGUre1urJku\n2bg9U80djuMPHA/28qXlYM/WY30vX4ia/4IXxnJ70Yvj/N3XzD/2px/N0vCTP/WTwf6Gb/muYJ+s\n3B5sX8ssp1jfH/9srKtrj8SxtFPOHZSZ2ajZ7VaMc6kdx5FyKWpXMm07cz7qTtvWIFbO5pqxcvcf\nBfvo8/5csOfu/VywWy9+SbRtXePzd7w3ptGeZXnhl70qS8O8tdPyZlzTrT0W59J6eUzDJOP9K9nz\nEdma6pi9HClv/+Mo2STU98Hy6eDo9ZNBInaUBg/uecj3+S2NQ+Y1+Z7y6Hskv0u2V2tp8jWboXke\nvX83rq78vNdNNhZW8jXcivlIddPXmvkvM7ZOPGs+la8T+9wjW/SQVK7a+qelyZ8L6lnZ+7qgby6s\nNaJPfakRx3NJanbjOFJY72tWYj6LOLSpVIv5KjdinuY341haL+U+9vnC9qu60S8vmtP9bMqrb/+K\n+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\nuUWl5i4IQ1rb1Gq4iNzuor+9cQ